006ef5e1:  ADD RSP, 10
006ef5fc:  MOV byte ptr [4E1037], 4c     'L'  First letter of "LoadLibraryA", used to not hash names of all funcs in 4E24E1 //[RBP + 12352023], 4c
006ef60f:  PUSH d9da1ce9   #LoadLibraryA hash
006ef62d:  PUSH [4DF699]   #KERNEL32.DLL        //[RBP + 12350685]      
006ef783:  CALL [4E1DB2]  (4E24E1) #Themida's GetProcAddress with hash  //[RBP + 12352d9e]      RET  006f1d65

006ef87d:  ADD RSP, 10
006ef882:  PUSH RAX            //PUSH #LoadLibraryA
006ef8a2:  LEA RCX, [6ef476]   #"USER32.dll"            //[RBP + 12560462]            
006ef8aa:  PUSH RSP
006ef8b2:  VMESP LOAD VM[27]
006ef8b6:  PUSH [RSP]
006ef8c0:  PUSH [RSP]
006ef8cc:  AND byte RSP, f0
006ef8db:  VMESP LOAD VM[27]
006ef8df:  ADD RSP, 10
006ef8f1:  VMESP LOAD VM[27]
006ef8f5:  SUB RSP, 20
006ef8ff:  VMESP LOAD VM[27]

006efa15:  CALL RAX      #LoadLibraryA  RET  006f1d74  

006efb1f:  ADD RSP, 10
006efb24:  ADD RSP, 20

006efb36:  VMESP LOAD VM[27]
006efb3a:  POP VM[27]
006efb4a:  VMESP LOAD VM[27]
006efb4e:  TEST RAX, RAX

006efb92:  JNE/JNZ [ZF == 0] 6efda3
006efb9f:  POP RAX              //POP #LoadLibraryA

006efbed:  MOV RAX, 00
006efd4f:  JMP OUT [4e2048] --> 4e8451   // [RBP+12353034]      // seems error exit


006efda3:  MOV [4e1fd0], RAX   HMODULE "USER32.dll"  //[RBP + 12352fbc], RAX
006efdb1:  POP RAX              //POP #LoadLibraryA
006efdd3:  LEA RCX, [6ef481]    "ADVAPI32.dll"    //[RBP + 1256046d]
006efddd:  PUSH RSP
006efde9:  VMESP LOAD VM[27]
006efded:  PUSH [RSP]
006efdfb:  PUSH [RSP]
006efe05:  AND byte RSP, f0
006efe14:  VMESP LOAD VM[27]
006efe18:  ADD RSP, 10
006efe20:  VMESP LOAD VM[27]
006efe24:  SUB RSP, 20
006efe2e:  VMESP LOAD VM[27]
006eff46:  CALL RAX            LoadLibraryA   RET  006f1d83

006f004c:  ADD RSP, 10
006f0051:  ADD RSP, 20
006f0063:  VMESP LOAD VM[27]
006f0067:  POP RSP?
006f0077:  VMESP LOAD VM[27]

006f007b:  TEST RAX, RAX

006f00bf:  JE/JZ [ZF == 1] 6efbed

006f00dc:  MOV [4E09D0], RAX     HMODULE "ADVAPI32.dll"   //[RBP + 123519bc], RAX
006f00f8:  CMP dword [4DF395], 01                        //dword [RBP + 12350381], 01

006f0144:  JNE/JNZ [ZF == 0] 6f079e

006f0167:  MOV byte ptr [4E1037], 4c     'L'  First letter of "LoadLibraryA", used to not hash names of all funcs in 4E24E1 //[RBP + 12352023], 4c    MOV byte ptr [RBP + 12352023], 4c
006f0182:  PUSH d9da1ce9                 #LoadLibraryA hash
006f019e:  PUSH [4DF699]   #KERNEL32.DLL        //[RBP + 12350685]
006f02f6:  CALL [4E1DB2]  (4E24E1) #Themida's GetProcAddress with hash  //[RBP + 12352d9e]     RET  006f1d92

006f03f8:  ADD RSP, 10
006f040d:  LEA RCX, [6EF48E]       "NTDLL.dll"         //[RBP + 1256047a]
006f0415:  PUSH RSP
006f0421:  VMESP LOAD VM[27]
006f0425:  PUSH [RSP]
006f0431:  PUSH [RSP]
006f043f:  AND byte RSP, f0
006f044a:  VMESP LOAD VM[27]
006f044e:  ADD RSP, 10
006f0460:  VMESP LOAD VM[27]
006f0464:  SUB RSP, 20
006f046e:  VMESP LOAD VM[27]

006f05a2:  CALL RAX        #LoadLibraryA     RET  006f1da1

006f06bc:  ADD RSP, 10
006f06c1:  ADD RSP, 20
006f06d3:  VMESP LOAD VM[27]
006f06d7:  POP RSP?
006f06e3:  VMESP LOAD VM[27]

006f06e7:  TEST RAX, RAX

006f072b:  JE/JZ [ZF == 1] 6efbed

006f0748:  MOV [4E2029], RAX    HMODULE "NTDLL.dll"           //[RBP + 12353015], RAX

006f079e:  MOV byte [4E1037], 47    'G'  of "GetLocalTime"               //[RBP + 12352023], 47
006f07b3:  PUSH a817731a                  GetLocalTime hash
006f07d5:  PUSH [4DF699]   #KERNEL32.DLL        //[RBP + 12350685]

006f0903:  CALL [4E1DB2]  (4E24E1) #Themida's GetProcAddress with hash  //[RBP + 12352d9e]  RET  006f1db0


006f0a0d:  ADD RSP, 10
006f0a28:  LEA RCX, [6EF498]     out _SYSTEMTIME            //[RBP + 12560484]  

006f0a32:  PUSH RSP
006f0a3a:  VMESP LOAD VM[27]
006f0a3e:  PUSH [RSP]
006f0a48:  PUSH [RSP]
006f0a54:  AND byte RSP, f0
006f0a69:  VMESP LOAD VM[27]
006f0a6d:  ADD RSP, 10
006f0a7f:  VMESP LOAD VM[27]
006f0a83:  SUB RSP, 20
006f0a8d:  VMESP LOAD VM[27]

006f0ba3:  CALL RAX   //GetLocalTime     RET  006f1dbf

006f0ca1:  ADD RSP, 10
006f0ca6:  ADD RSP, 20

006f0cb8:  VMESP LOAD VM[27]
006f0cbc:  POP VM[27]
006f0cc8:  VMESP LOAD VM[27]

006f0ce2:  LEA RAX, [6EF498]       _SYSTEMTIME            //[RBP + 12560484]  
006f0cfc:  MOV RBX, word [RAX + 0xe]       //milliseconds
006f0d1a:  MOV RAX, word [RAX + 0xc]       //seconds
006f0d2a:  SHL RAX, dword RAX, 0x10
006f0d31:  OR RAX, dword RAX, dword RBX    // sec_millisec
006f0d3f:  SHL RBX, dword RBX, 0x10        // millisec_0000
006f0d46:  ADD RBX, dword RBX, dword RCX   //seems RCX with junk
006f0d4e:  ADD RAX, dword RAX, b8736746    //seems it's all can be junk?
006f0d58:  XOR RAX, dword RAX, dword RBX   // may be it's all only for XOR SEC and MILLISEC shl'ed by 0x10?
006f0d80:  MOV dword [4E1131], RAX            //[RBP + 1235211d], RAX

006f0d8a:  MOV RAX, 00

006f0d9a:  TEST dword RAX, dword RAX

006f0de2:  JE/JZ [ZF == 1] 6f1ad3   //seems all this will be skipped to 6f1ad3

006f0def:  MOV R_1E, RBP
006f0df7:  ADD R_1E, 12352023
006f0e05:  ADD byte [R_1E], 47
006f0e12:  MOV RAX, d49aa7d2
006f0e1a:  PUSH RAX
006f0e26:  MOV R_1E, RBP
006f0e30:  ADD R_1E, 12350685
006f0e3e:  PUSH [R_1E]
006f0e48:  MOV R_1E, RBP
006f0e52:  ADD R_1E, 12352d9e
006f0e60:  PUSH RAX
006f0e72:  PUSH RAX
006f0e7e:  PUSH EFLG
006f0e8c:  PUSH RAX
006f0e98:  PUSH RCX
006f0ea4:  PUSH RDX
006f0eb6:  PUSH RBX
006f0ec8:  PUSH RBP
006f0ed4:  PUSH RSI
006f0ee0:  PUSH RDI
006f0ef2:  PUSH R15
006f0f04:  PUSH R14
006f0f10:  PUSH R13
006f0f22:  PUSH R12
006f0f2e:  PUSH R11
006f0f36:  PUSH R10
006f0f3e:  PUSH R9
006f0f50:  PUSH R8
006f0f5e:  UNSHFL
006f0f80:  UNSHFL
006f0f9a:  CALL R_1E    RET  006f1dce
006f0fa4:  INIT 

006f0fa4:  STORE STACK 27
006f0fa8:  POP VM[16] = R8
006f0fb8:  POP VM[41] = R9
006f0fc8:  POP VM[39] = R10
006f0fd8:  POP VM[141] = R11
006f0fe8:  POP VM[49] = R12
006f0ff8:  POP VM[e7] = R13
006f1008:  POP VM[b1] = R14
006f1018:  POP VM[41] = R15
006f1028:  POP VM[b9] = RDI
006f1038:  POP VM[61] = RSI
006f1048:  POP VM[51] = RBP
006f1058:  POP VM[61] = RBX
006f1064:  POP VM[61] = RBX
006f1070:  POP VM[11d] = RDX
006f1080:  POP VM[85] = RCX
006f1090:  POP VM[129] = RAX
006f10a0:  POP VM[de] = EFLG
006f10ac:  ADD RSP, 10
006f10b1:  MOV RBX, RAX
006f10bb:  MOV R_1E, RBP
006f10c5:  ADD R_1E, 12560494
006f10cd:  MOV RSI, R_1E
006f10d5:  MOV dword RSI, 41544350
006f10e7:  MOV R_1E, RSI
006f10f1:  ADD R_1E, 04
006f10f9:  MOV dword R_1E, 6f6f4856
006f110b:  MOV R_1E, RSI
006f1113:  ADD R_1E, 08
006f111b:  MOV dword [R_1E], 6c642e6b
006f1129:  MOV R_1E, RSI
006f1133:  ADD R_1E, 0c
006f113b:  MOV byte ptr [R_1E], 6c
006f1146:  PUSH RSP
006f1158:  VMESP LOAD VM[27]
006f115c:  PUSH [RSP]
006f1166:  PUSH [RSP]
006f1172:  AND byte RSP, f0
006f1185:  VMESP LOAD VM[27]
006f1189:  ADD RSP, 1590010
006f1191:  VMESP LOAD VM[27]
006f1195:  SUB RSP, e4b70020
006f119f:  VMESP LOAD VM[27]
006f11a3:  MOV RCX, RSI
006f11ab:  PUSH RAX
006f11b7:  PUSH RAX
006f11c9:  PUSH EFLG
006f11d7:  PUSH RAX
006f11e3:  PUSH RCX
006f11eb:  PUSH RDX
006f11f7:  PUSH RBX
006f1203:  PUSH RBP
006f120f:  PUSH RSI
006f121b:  PUSH RDI
006f122d:  PUSH R15
006f1239:  PUSH R14
006f124b:  PUSH R13
006f125d:  PUSH R12
006f126f:  PUSH R11
006f1281:  PUSH R10
006f128d:  PUSH R9
006f1299:  PUSH R8
006f12a7:  UNSHFL
006f12c9:  UNSHFL
006f12e3:  CALL RBX    RET  006f1ddd
006f12ed:  INIT 

006f12ed:  STORE STACK 27
006f12f1:  POP VM[16] = R8
006f12fd:  POP VM[41] = R9
006f130d:  POP VM[39] = R10
006f131d:  POP VM[49] = R11
006f132d:  POP VM[141] = R12
006f133d:  POP VM[e7] = R13
006f134d:  POP VM[b1] = R14
006f135d:  POP VM[f1] = R15
006f136d:  POP VM[85] = RDI
006f137d:  POP VM[b9] = RSI
006f138d:  POP VM[51] = RBP
006f139d:  POP VM[d6] = RBX
006f13a9:  POP VM[d6] = RBX
006f13b9:  POP VM[11d] = RDX
006f13c5:  POP VM[61] = RCX
006f13d1:  POP VM[85] = RAX
006f13e1:  POP VM[de] = EFLG
006f13ed:  ADD RSP, 10
006f13f2:  ADD RSP, 20
006f1404:  VMESP LOAD VM[27]
006f1408:  POP VM[27]
006f1418:  VMESP LOAD VM[27]
006f141c:  TEST RAX, RAX
006f142c:  UNSHFL
006f144e:  UNSHFL
006f1468:  JE/JZ [ZF == 1] 6f19fd
006f1475:  PUSH RAX
006f1481:  MOV R_1E, RBP
006f1489:  ADD R_1E, 12352023
006f1491:  MOV byte ptr [R_1E], 46
006f149c:  MOV RAX, bade0614
006f14a4:  PUSH RAX
006f14ac:  MOV R_1E, RBP
006f14b4:  ADD R_1E, 12350685
006f14bc:  PUSH [R_1E]
006f14c8:  MOV R_1E, RBP
006f14d2:  ADD R_1E, 12352d9e
006f14e0:  PUSH RAX
006f14e8:  PUSH RAX
006f14f4:  PUSH EFLG
006f1502:  PUSH RAX
006f150a:  PUSH RCX
006f151c:  PUSH RDX
006f152e:  PUSH RBX
006f153a:  PUSH RBP
006f1546:  PUSH RSI
006f154e:  PUSH RDI
006f155a:  PUSH R15
006f1566:  PUSH R14
006f156e:  PUSH R13
006f1576:  PUSH R12
006f1588:  PUSH R11
006f159a:  PUSH R10
006f15a6:  PUSH R9
006f15b2:  PUSH R8
006f15c0:  UNSHFL
006f15e2:  UNSHFL
006f15fc:  CALL R_1E    RET  006f1dec
006f1606:  INIT 

006f1606:  STORE STACK 27
006f160a:  POP VM[16] = R8
006f1616:  POP VM[41] = R9
006f1622:  POP VM[39] = R10
006f1632:  POP VM[141] = R11
006f163e:  POP VM[49] = R12
006f164e:  POP VM[e7] = R13
006f165e:  POP VM[b1] = R14
006f166a:  POP VM[39] = R15
006f167a:  POP VM[85] = RDI
006f168a:  POP VM[b9] = RSI
006f1696:  POP VM[51] = RBP
006f16a2:  POP VM[d6] = RBX
006f16b2:  POP VM[d6] = RBX
006f16c2:  POP VM[129] = RDX
006f16d2:  POP VM[11d] = RCX
006f16de:  POP VM[61] = RAX
006f16ee:  POP VM[de] = EFLG
006f16fe:  ADD RSP, 10
006f1703:  MOV RBX, RAX
006f170b:  POP VM[61]
006f1717:  PUSH RSP
006f1729:  VMESP LOAD VM[27]
006f172d:  PUSH [RSP]
006f173b:  PUSH [RSP]
006f1747:  AND byte RSP, f0
006f1750:  VMESP LOAD VM[27]
006f1754:  ADD RSP, 10
006f1766:  VMESP LOAD VM[27]
006f176a:  SUB RSP, 20
006f1774:  VMESP LOAD VM[27]
006f1778:  MOV RCX, RAX
006f1782:  PUSH RAX
006f178a:  PUSH RAX
006f1792:  PUSH EFLG
006f179e:  PUSH RAX
006f17a6:  PUSH RCX
006f17b2:  PUSH RDX
006f17ba:  PUSH RBX
006f17c6:  PUSH RBP
006f17ce:  PUSH RSI
006f17e0:  PUSH RDI
006f17e8:  PUSH R15
006f17fa:  PUSH R14
006f1806:  PUSH R13
006f1812:  PUSH R12
006f1824:  PUSH R11
006f182c:  PUSH R10
006f183e:  PUSH R9
006f184a:  PUSH R8
006f1858:  UNSHFL
006f187a:  UNSHFL
006f1894:  CALL RBX    RET  006f1dfb
006f189e:  INIT 

006f189e:  STORE STACK 27
006f18a2:  POP VM[16] = R8
006f18b2:  POP VM[41] = R9
006f18be:  POP VM[39] = R10
006f18ce:  POP VM[49] = R11
006f18da:  POP VM[141] = R12
006f18ea:  POP VM[e7] = R13
006f18fa:  POP VM[b1] = R14
006f190a:  POP VM[f1] = R15
006f191a:  POP VM[129] = RDI
006f1926:  POP VM[b9] = RSI
006f1932:  POP VM[51] = RBP
006f1942:  POP VM[d6] = RBX
006f194e:  POP VM[d6] = RBX
006f195e:  POP VM[85] = RDX
006f196a:  POP VM[11d] = RCX
006f197a:  POP VM[61] = RAX
006f1986:  POP VM[de] = EFLG
006f1996:  ADD RSP, 10
006f199b:  ADD RSP, 20
006f19ad:  VMESP LOAD VM[27]
006f19b1:  POP VM[27]
006f19bd:  VMESP LOAD VM[27]
006f19c1:  UNSHFL
006f19e3:  UNSHFL
006f19ff:  INIT 

006f19ff:  MOV R_1E, RBP
006f1a07:  ADD R_1E, 12560494
006f1a0f:  MOV RSI, R_1E
006f1a17:  MOV dword RSI, 00
006f1a29:  MOV R_1E, RSI
006f1a33:  ADD R_1E, 04
006f1a41:  MOV dword R_1E, 00
006f1a53:  MOV R_1E, RSI
006f1a5d:  ADD R_1E, 08
006f1a6b:  MOV dword [R_1E], 00



006f1ad3:  MOV RAX, dword[6EF472]            #2F10B372         //dword [RBP + 1256045e]
006f1ad9:  XOR RAX, dword RAX, 3d469d0d      #2F10B372 ^ 3d469d0d = 12562E7F
006f1ae5:  ADD RAX, RBP                      #12562E7F - RBP(11E70FEC) = 6F1E93

006f1c39:  JMP OUT RAX   6F1E93           #execute tricky-complicated code and then go to PROG1
